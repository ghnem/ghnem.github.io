{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Alpha Care Internal Documentation","text":"<p>This an exmaple of how you can expect my work to look like. This documentation has three main sections:</p> <ul> <li>Development Docs: where I explain how to run the project, and manage the development workflow.</li> <li>Rationale: where I explain the design decisions and the reasoning behind them.</li> <li>API Docs: Swagger API documentation.</li> </ul>"},{"location":"development/","title":"Development","text":""},{"location":"development/#environment-setup","title":"Environment setup","text":""},{"location":"development/#devcontainer-recommended","title":"DevContainer (recommended)","text":"<p>Tip</p> <p>The project is built on top of DevContainer, for minimal onboarding overhead and optimal productivity.</p> <p>The DevContainer have all the tools required for development; vscode extensions (sqlite, redis, pylance, redis, githhub actions, etc..), redis server, and CLIs. Also, it will pick up the right venv and activate it for you.</p> <ol> <li>Install Docker, Visual Studio Code, and the Remote - Containers extension.</li> <li>Clone the repository.</li> <li>Open the repository in Visual Studio Code.</li> <li>The DevContainers extension will prompt you to reopen the project in a container. If it doesn't, in the command palette <code>(ctrl + shift + p)</code>, search for <code>DevContainer: Reopen in Container</code>.</li> <li>The project will build the container and install all dependencies. This may take a few minutes.</li> <li>Profit!  You have a fully fledged development environment ready to go.</li> </ol>"},{"location":"development/#local-setup","title":"Local setup","text":"<p>If you prefer not to use DevContainer, you can set up the project locally.</p> <ol> <li>Install astral/uv</li> <li>Run <code>uv sync</code> It will create a virtual environment with the version specified in the <code>.python-version</code> file.</li> <li>Activate the virtual environment <code>source .venv/bin/activate</code></li> <li>Run a redis server on <code>localhost:6379</code></li> <li>copy <code>.env.example</code> to <code>.env</code> and fill in the required environment variables.</li> </ol> <p>Warning</p> <p>All the commands from now on assume you have the virtual environment activated. Opening a new terminal in the DevContainer will activate the virtual environment for you (if doesn't reload run <code>reload window</code> from the command pallete).</p> <p>If don't want to activate the virtual environment, you can prefix the commands with <code>uv run</code>, e.g., <code>uv run poe dev</code>.    </p>"},{"location":"development/#task-runner","title":"Task runner","text":"<p>I am using poethepoet to ease the development workflow. Tasks are defined in the <code>pyproject.toml</code> file.</p> <pre><code>$ poe --help\nPoe the Poet - A task runner that works well with poetry.\nversion \u001b[36m0.32.1\u001b[0m\n\n\u001b[39;1mUsage:\u001b[0m\n  \u001b[39;4mpoe\u001b[0m [global options] task [task arguments]\n\n\u001b[39;1mGlobal options:\u001b[0m\n  -h, --help            Show this help page and exit\n  --version             Print the version and exit\n  -v, --verbose         Increase command output (repeatable)\n  -q, --quiet           Decrease command output (repeatable)\n  -d, --dry-run         Print the task contents but don't actually run it\n  -C, --directory PATH  Specify where to find the pyproject.toml\n  -e, --executor EXECUTOR\n                        Override the default task executor\n  --ansi                Force enable ANSI output\n  --no-ansi             Force disable ANSI output\n\n\u001b[39;1mConfigured tasks:\u001b[0m\n  \u001b[36mdev                 \u001b[0m  Run flask development server in debug mode\n  \u001b[36mdev-docs            \u001b[0m  Run mkdocs development server\n  \u001b[36mmypy                \u001b[0m  Run mypy type checker\n  \u001b[36mpyright             \u001b[0m  Run pyright type checker\n  \u001b[36mlint                \u001b[0m  Lint the projec with ruff\n  \u001b[36mfmt                 \u001b[0m  Format the project with isort and black\n  \u001b[36mcreate_admin        \u001b[0m  Create a new admin user\n    \u001b[34m--first-name       \u001b[0m\n    \u001b[34m--last-name        \u001b[0m\n    \u001b[34m--email            \u001b[0m\n    \u001b[34m--phone            \u001b[0m\n    \u001b[34m--password         \u001b[0m\n  \u001b[36mswagger             \u001b[0m  Export the swagger documentation to a file\n    \u001b[34m--path             \u001b[0m The path to export the swagger documentation to [default: docs/swagger.json]\n</code></pre>"},{"location":"development/#running-flask-dev-server","title":"Running flask dev server","text":"<p>To run the server, you can use the <code>poe</code> task runner.</p> <p><pre><code>poe dev\n</code></pre> A typial output if you run this in a fresh DevContainer would look like this:</p> <code>poe dev</code> output <pre><code>Poe =&gt; flask --app app run --debug\nConfig(db_url='sqlite:///app.db',\n    redis_url='redis://localhost:6379',\n    instance_path=PosixPath('/workspaces/alfa-assesment'),\n    jwt_secret='super secret change in production',\n    jwt_location='headers',\n    server_name='localhost:5000',\n    application_root='',\n    preferred_url_scheme='http',\n    greetig='hello',\n    log_fire_enabled=False,\n    password_time_cost=2,\n    password_memory_cost=19456,\n    is_testing=False)\n* Serving Flask app 'app'\n* Debug mode: on\nWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.\n* Running on http://127.0.0.1:5000\nPress CTRL+C to quit\n* Restarting with watchdog (inotify)\nConfig(db_url='sqlite:///app.db',\n    redis_url='redis://localhost:6379',\n    instance_path=PosixPath('/workspaces/alfa-assesment'),\n    jwt_secret='super secret change in production',\n    jwt_location='headers',\n    server_name='localhost:5000',\n    application_root='',\n    preferred_url_scheme='http',\n    greetig='hello',\n    log_fire_enabled=False,\n    password_time_cost=2,\n    password_memory_cost=19456,\n    is_testing=False)\n* Debugger is active!\n* Debugger PIN: 113-386-978\n</code></pre>"},{"location":"development/#running-tests","title":"Running tests","text":"<pre><code>$ pytest --cov app\n============================= test session starts ==============================\nplatform linux -- Python 3.13.1, pytest-8.3.4, pluggy-1.5.0\nrootdir: /home/runner/work/alfa/alfa\nconfigfile: pyproject.toml\nplugins: mock-3.14.0, alembic-0.11.1, cov-6.0.0, profiling-1.8.1, logfire-3.1.1, xdist-3.6.1, hypothesis-6.123.17\ncollected 14 items\n\ntests/v1/test_protected.py .....                                         [ 35%]\ntests/v1/test_public.py ...                                              [ 57%]\ntests/v1/test_user.py ......                                             [100%]\n\n---------- coverage: platform linux, python 3.13.1-final-0 -----------\nName                      Stmts   Miss  Cover\n---------------------------------------------\napp/__init__.py               1      0   100%\napp/__main__.py              42      5    88%\napp/api/__init__.py           0      0   100%\napp/api/v1/__init__.py        9      0   100%\napp/api/v1/protected.py      31      0   100%\napp/api/v1/public.py         12      0   100%\napp/api/v1/root.py           11      0   100%\napp/api/v1/user.py           69      6    91%\napp/config.py                36      3    92%\napp/db/__init__.py            0      0   100%\napp/db/connection.py          9      0   100%\napp/db/models.py             23      0   100%\napp/db/queries.py             4      0   100%\napp/schema/user.py           14      0   100%\n---------------------------------------------\nTOTAL                       261     14    95%\n\n\n============================== 14 passed in 2.24s ==============================\n</code></pre>"},{"location":"development/#quality-checks","title":"Quality checks","text":"<p>To ensure a high level of code quality, I am using mypy, ruff</p> <p>Fixable formatting and linting issues can be fixed by passing the <code>--fix</code> flag to the <code>poe fmt</code> and <code>poe lint</code> commands.</p> <pre><code>poe fmt --fix\npoe lint --fix\n</code></pre>"},{"location":"development/#cicd","title":"CI/CD","text":"<p>I am using GitHub Actions are used for CI/CD. The workflow is defined in <code>.github/workflows</code> directory.</p> <ul> <li> <p><code>ci.yml</code> has 3 jobs</p> <ul> <li><code>check</code>runs the tests, linting, formatting checks.</li> <li><code>integration</code> makes sure the swagger documentation is up to date.</li> <li><code>docs</code> publishes the documentation to GitHub pages.</li> </ul> </li> <li> <p><code>security.yml</code> has a single job</p> <ul> <li><code>audit</code> checks for security vulnerabilities in code.</li> </ul> </li> </ul>"},{"location":"e-commerce-erd/","title":"E-Commerce ERD (WIP)","text":"<pre><code>erDiagram\n    CUSTOMER ||--o{ ORDER : places\n    ORDER ||--|{ LINE-ITEM : contains\n    CUSTOMER }|..|{ DELIVERY-ADDRESS : uses</code></pre>"},{"location":"swagger/","title":"Swagger","text":""}]}